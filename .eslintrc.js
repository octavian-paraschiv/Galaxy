/**
 * We are using the .JS version of an ESLint config file here so that we can
 * add lots of comments to better explain and document the setup.
 */
module.exports = {
  env: {
    browser: true,
    node: true,
    es6: true,
    es2017: true
  },
  rules: {
    'max-lines': ['error', { max: 1500 }],
  },
  overrides: [
    {
      files: '**/*.js',
      extends: [ 'eslint:recommended' ],
      rules: {
        'semi': 'error',
        'quotes': ['error', 'single'],
        'brace-style': ['error', '1tbs', { allowSingleLine: true }],
        'indent': ['error', 2, {
          // indent case statements 1-level, looks nicer to our traditional C# eyes
          SwitchCase: 1,
          flatTernaryExpressions: true,
        }],

        'spaced-comment': ['error', 'always', { exceptions: ['*'] }],
        'space-in-parens': 'error',
        'object-curly-spacing': ['warn', 'always'],
        'comma-spacing': 'error',
        'func-call-spacing': 'error',
        'keyword-spacing': 'error',
        'no-extra-parens': 'error',
        'space-infix-ops': 'error',
      }
    },
    {
      files: '**/*.ts',
      parser: '@typescript-eslint/parser',
      parserOptions: {
        ecmaVersion: 10,
        project: [
          './tsconfig.json'
        ],
        sourceType: 'module',
        ecmaFeatures: {
          modules: true
        }
      },
      plugins: [
        '@typescript-eslint',
        'deprecation',
        'filenames',
      ],
      extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@angular-eslint/recommended'
      ],
      rules: {
        'filenames/match-regex': ['error', '^[0-9a-z-\\.]+$'],

        '@angular-eslint/directive-selector': [ 'error', { type: 'attribute', prefix: 'app', style: 'camelCase' }],
        '@angular-eslint/component-selector': [ 'error', { type: 'element', prefix: 'app', style: 'kebab-case' }],
        '@angular-eslint/component-class-suffix': 'error',
        '@angular-eslint/directive-class-suffix': 'error',

        // Style
        'max-len': ['error', {
          code: 160,
          ignorePattern: '^import .+',
          ignoreUrls: true,
          ignoreStrings: true, // mostly in test data
          ignoreRegExpLiterals: true, // mostly in test data
        }],
        'indent': 'off',
        '@typescript-eslint/indent': ['error', 2, {
          SwitchCase: 1,
          flatTernaryExpressions: true,
        }],
        '@typescript-eslint/semi': ['error'],
        'quotes': 'off',
        '@typescript-eslint/quotes': [ 'error', 'single', {
          avoidEscape: true
        }],
        'brace-style': 'off',
        '@typescript-eslint/brace-style': ['error', '1tbs', { allowSingleLine: true }],

        'no-multiple-empty-lines': ['error'],
        'spaced-comment': ['error', 'always', { exceptions: ['*'] }],
        'space-in-parens': ['error'],
        'object-curly-spacing': ['warn', 'always'],
        'comma-spacing': 'off',
        '@typescript-eslint/comma-spacing': ['error'],
        'func-call-spacing': 'off',
        '@typescript-eslint/func-call-spacing': ['error'],
        'keyword-spacing': 'off',
        '@typescript-eslint/keyword-spacing': ['error'],
        '@typescript-eslint/type-annotation-spacing': ['error'],
        'no-extra-parens': 'off',
        '@typescript-eslint/no-extra-parens': ['error', 'functions'],
        'space-infix-ops': 'error',

        '@typescript-eslint/naming-convention': ['error',
          { selector: 'typeLike', format: ['PascalCase'] },
          { selector: 'variableLike', format: ['camelCase'] },
          { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },
          { selector: 'method', format: ['camelCase'] },
          { selector: 'typeParameter', format: ['PascalCase'] }
        ],

        'complexity': ['warn', 32],

        // We have legitimate uses of "while (true)" that result in more readable code
        'no-constant-condition': ['error', { checkLoops: false } ],
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['error'],
        '@typescript-eslint/no-for-in-array': ['error'],
        '@typescript-eslint/prefer-optional-chain': ['warn'],

        '@typescript-eslint/no-unused-vars': 'off', // unused variable checking is already enabled in tsconfig
        '@typescript-eslint/explicit-module-boundary-types': ['off'], // wants return types for all Angular lifecycle events

        '@typescript-eslint/no-empty-function': ['off'], // allow empty functions

        'deprecation/deprecation': 'warn',
      },
      overrides: [
        // Use this to override or disable rule for certain files that we do not want to lint,
        // e.g. autogenerated code
      ]
    },
    {
      files: '**/*.component.html',
      extends: [
        'plugin:@angular-eslint/template/recommended'
      ],
      rules: {
        'max-len': ['error', { code: 160, }],
      },
      overrides: [
        // Use this to override or disable rule for certain files that we do not want to lint,
        // e.g. autogenerated code
      ]
    }
  ]
};
